{"version":3,"file":"static/js/312.1a1c07dd.chunk.js","mappings":"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","sources":["components/Icon2D.tsx","components/IconPicker2D.tsx"],"sourcesContent":["import { ButtonBase } from \"@mui/material\";\n\nexport default function Icon2D({\n  icon,\n  name,\n  categories,\n  onClick,\n}: {\n  icon: string;\n  name: string;\n  categories: string;\n  onClick: () => void;\n}) {\n  return (\n    <ButtonBase className=\"icon2d\" onClick={onClick}>\n      <div className=\"mask\">\n        <span>{name}</span>\n        <small>{categories}</small>\n      </div>\n      <div className=\"icon\" dangerouslySetInnerHTML={{ __html: icon }} />\n    </ButtonBase>\n  );\n}\n","import { useEffect, useRef, useState } from \"react\";\nimport { Search } from \"@mui/icons-material\";\nimport {\n  Box,\n  ButtonBase,\n  FormControl,\n  InputAdornment,\n  Popover,\n  Stack,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport Fuse from \"fuse.js\";\nimport LazyLoad, { forceCheck } from \"react-lazyload\";\n\nimport { t } from \"../locales\";\nimport icons2d from \"../assets/2d.json\";\nimport rawSVGs from \"../assets/rawSVGs.json\";\nimport Icon2D from \"./Icon2D\";\nimport { ChromePicker } from \"react-color\";\nimport getContrastText from \"../utils/getContrastText\";\n\nconst fuse = new Fuse(icons2d, {\n  keys: [\"id\", \"name\", \"categories\"],\n  threshold: 0.1,\n});\n\nfunction debounce(func: Function, delay: number) {\n  let timeoutId: NodeJS.Timeout;\n  return function () {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func(), delay);\n  };\n}\n\nexport default function IconPicker2D({\n  onPicked,\n}: {\n  onPicked: (id: string, svg: string, fill: string) => void;\n}) {\n  const [search, setSearch] = useState(\"\");\n\n  const [color, setColor] = useState(\"#444444\");\n  const [svgColor, setSvgColor] = useState(\"#444444\");\n\n  const [pickerOpen, setPickerOpen] = useState(false);\n\n  const anchorEl = useRef<HTMLButtonElement | null>(null);\n\n  const [results, setResults] = useState<any[]>([]);\n\n  useEffect(() => {\n    if (search.length === 0) {\n      setResults([]);\n      return;\n    }\n    debounce(() => {\n      const res = fuse.search(search);\n      setResults(res.map((r) => r.item));\n      setTimeout(() => forceCheck(), 50);\n    }, 100)();\n  }, [search]);\n\n  const handleColorChange = (color: any) => {\n    setColor(color.hex);\n  };\n\n  const handleColorChanged = (color: any) => {\n    setSvgColor(color.hex);\n  };\n\n  return (\n    <Box\n      sx={{\n        \".icon2d\": {\n          svg: {\n            width: 136,\n            height: 136,\n            fill: svgColor,\n          },\n        },\n      }}\n    >\n      <Stack\n        direction=\"row\"\n        flex={1}\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        gap={1}\n        sx={{ py: 1, position: \"sticky\", top: 56, bgcolor: \"#fff\", zIndex: 1 }}\n      >\n        <ButtonBase\n          onClick={() => setPickerOpen(true)}\n          sx={{ height: 40, borderRadius: 2, bgcolor: color }}\n          ref={anchorEl}\n        >\n          <Typography color={getContrastText(color)} px={1}>\n            {color}\n          </Typography>\n        </ButtonBase>\n        <FormControl variant=\"outlined\" fullWidth>\n          <TextField\n            slotProps={{\n              input: {\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <Search fontSize=\"small\" />\n                  </InputAdornment>\n                ),\n              },\n            }}\n            label=\"Search Icon\"\n            placeholder=\"Search for Icon\"\n            size=\"small\"\n            fullWidth\n            autoFocus\n            autoComplete=\"off\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </FormControl>\n        <Popover\n          open={pickerOpen}\n          onClose={() => setPickerOpen(false)}\n          anchorEl={anchorEl.current}\n          anchorOrigin={{\n            vertical: \"bottom\",\n            horizontal: \"left\",\n          }}\n        >\n          <Stack alignItems=\"flex-end\" bgcolor=\"#ffffff\">\n            <ChromePicker\n              color={color}\n              onChange={handleColorChange}\n              onChangeComplete={handleColorChanged}\n              disableAlpha\n              styles={{\n                default: {\n                  picker: {\n                    width: 300,\n                    boxShadow: \"none\",\n                  },\n                },\n              }}\n            />\n          </Stack>\n        </Popover>\n      </Stack>\n\n      <Box\n        className=\"widget-list\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        flexWrap=\"wrap\"\n        justifyContent=\"center\"\n      >\n        {(results.length > 0 ? results : icons2d).map((icon) => (\n          <LazyLoad\n            key={icon.id}\n            height={160}\n            style={{ width: 160 }}\n            preventLoading\n            scroll\n            overflow\n          >\n            <Icon2D\n              // @ts-ignore\n              icon={rawSVGs[icon.id]}\n              name={icon.name}\n              categories={icon.categories.join(\", \")}\n              // @ts-ignore\n              onClick={() => onPicked(icon.id, rawSVGs[icon.id], color)}\n            />\n          </LazyLoad>\n        ))}\n        {search.length > 0 && results.length === 0 && (\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {t(\"no_results\")}\n          </Typography>\n        )}\n      </Box>\n    </Box>\n  );\n}\n"],"names":["Icon2D","_ref","icon","name","categories","onClick","_jsxs","ButtonBase","className","children","_jsx","dangerouslySetInnerHTML","__html","fuse","Fuse","icons2d","keys","threshold","IconPicker2D","onPicked","search","setSearch","useState","color","setColor","svgColor","setSvgColor","pickerOpen","setPickerOpen","anchorEl","useRef","results","setResults","useEffect","length","func","delay","timeoutId","clearTimeout","setTimeout","debounce","res","map","r","item","forceCheck","Box","sx","svg","width","height","fill","Stack","direction","flex","alignItems","justifyContent","gap","py","position","top","bgcolor","zIndex","borderRadius","ref","Typography","getContrastText","px","FormControl","variant","fullWidth","TextField","slotProps","input","endAdornment","InputAdornment","Search","fontSize","label","placeholder","size","autoFocus","autoComplete","value","onChange","e","target","Popover","open","onClose","current","anchorOrigin","vertical","horizontal","ChromePicker","hex","onChangeComplete","disableAlpha","styles","default","picker","boxShadow","display","flexDirection","flexWrap","LazyLoad","style","preventLoading","scroll","overflow","rawSVGs","id","join","t"],"sourceRoot":""}