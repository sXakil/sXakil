{"version":3,"file":"static/js/244.f26bc102.chunk.js","mappings":"kPAEe,SAASA,EAAMC,GAU1B,IAV2B,GAC7BC,EAAE,KACFC,EAAI,WACJC,EAAU,QACVC,GAMDJ,EACC,OACEK,EAAAA,EAAAA,MAACC,EAAAA,EAAU,CAACC,UAAU,SAASH,QAASA,EAAQI,SAAA,EAC9CH,EAAAA,EAAAA,MAAA,OAAKE,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,QAAAD,SAAON,KACPO,EAAAA,EAAAA,KAAA,SAAAD,SAAQL,QAEVM,EAAAA,EAAAA,KAAA,OAAKC,IAAG,aAAAC,OAAeV,EAAE,SAASW,IAAKV,MAG7C,C,qriLCNMW,EAAO,IAAIC,EAAAA,EAAKC,EAAS,CAC7BC,KAAM,CAAC,KAAM,OAAQ,cACrBC,UAAW,KAWE,SAASC,EAAYlB,GAIhC,IAJiC,SACnCmB,GAGDnB,EACC,MAAOoB,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAE9BC,EAASC,IAAcF,EAAAA,EAAAA,UAAgB,IAc9C,OAZAG,EAAAA,EAAAA,YAAU,KACc,IAAlBL,EAAOM,OAlBf,SAAkBC,EAAgBC,GAChC,IAAIC,EACJ,OAAO,WACLC,aAAaD,GACbA,EAAYE,YAAW,IAAMJ,KAAQC,EACvC,CACF,CAgBII,EAAS,KACP,MAAMC,EAAMpB,EAAKO,OAAOA,GACxBI,EAAWS,EAAIC,KAAKC,GAAMA,EAAEC,QAC5BL,YAAW,KAAMM,EAAAA,EAAAA,OAAc,MAC9B,IAJHL,GAHER,EAAW,MAQZ,CAACJ,KAGFf,EAAAA,EAAAA,MAACiC,EAAAA,EAAG,CACFC,GAAI,CACF,UAAW,CACTC,IAAK,CAAEC,MAAO,OAAQC,OAAQ,UAEhClC,SAAA,EAEFC,EAAAA,EAAAA,KAACkC,EAAAA,EAAW,CACVJ,GAAI,CAAEK,GAAI,EAAGC,SAAU,SAAUC,IAAK,GAAIC,QAAS,OAAQC,OAAQ,GACnEC,QAAQ,WACRC,WAAS,EAAA1C,UAETC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAS,CACRC,UAAW,CACTC,MAAO,CACLC,cACE7C,EAAAA,EAAAA,KAAC8C,EAAAA,EAAc,CAACV,SAAS,MAAKrC,UAC5BC,EAAAA,EAAAA,KAAC+C,EAAAA,EAAM,CAACC,SAAS,cAKzBC,MAAM,cACNC,YAAY,kBACZC,KAAK,QACLV,WAAS,EACTW,WAAS,EACTC,aAAa,MACbC,MAAO3C,EACP4C,SAAWC,GAAM5C,EAAU4C,EAAEC,OAAOH,YAGxC1D,EAAAA,EAAAA,MAACiC,EAAAA,EAAG,CACF/B,UAAU,cACV4D,QAAQ,OACRC,cAAc,MACdC,SAAS,OACTC,eAAe,SAAQ9D,SAAA,EAErBe,EAAQG,OAAS,EAAIH,EAAUR,GAASmB,KAAKqC,IAC7C9D,EAAAA,EAAAA,KAAC+D,EAAAA,GAAQ,CAEP9B,OAAQ,IACR+B,MAAO,CAAEhC,MAAO,KAChBiC,gBAAc,EACdC,QAAM,EACNC,UAAQ,EAAApE,UAERC,EAAAA,EAAAA,KAACV,EAAM,CACLE,GAAIsE,EAAKtE,GACTC,KAAMqE,EAAKrE,KACXC,WAAYoE,EAAKpE,WAAW0E,KAAK,MACjCzE,QAASA,IAAMe,EAASoD,EAAKtE,OAX1BsE,EAAKtE,MAebmB,EAAOM,OAAS,GAAwB,IAAnBH,EAAQG,SAC5BjB,EAAAA,EAAAA,KAACqE,EAAAA,EAAU,CAAC7B,QAAQ,QAAQ8B,MAAM,iBAAgBvE,UAC/CwE,EAAAA,EAAAA,GAAE,qBAMf,C","sources":["components/Icon3D.tsx","components/IconPicker3D.tsx"],"sourcesContent":["import { ButtonBase } from \"@mui/material\";\n\nexport default function Icon3D({\n  id,\n  name,\n  categories,\n  onClick,\n}: {\n  id: string;\n  name: string;\n  categories: string;\n  onClick: () => void;\n}) {\n  return (\n    <ButtonBase className=\"icon3d\" onClick={onClick}>\n      <div className=\"mask\">\n        <span>{name}</span>\n        <small>{categories}</small>\n      </div>\n      <img src={`/3d-icons/${id}.webp`} alt={name} />\n    </ButtonBase>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { Search } from \"@mui/icons-material\";\nimport {\n  Box,\n  FormControl,\n  InputAdornment,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport Fuse from \"fuse.js\";\nimport LazyLoad, { forceCheck } from \"react-lazyload\";\n\nimport { t } from \"../locales\";\nimport Icon3D from \"../components/Icon3D\";\nimport icons3d from \"../assets/3d.json\";\n\nconst fuse = new Fuse(icons3d, {\n  keys: [\"id\", \"name\", \"categories\"],\n  threshold: 0.1,\n});\n\nfunction debounce(func: Function, delay: number) {\n  let timeoutId: NodeJS.Timeout;\n  return function () {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func(), delay);\n  };\n}\n\nexport default function IconPicker3D({\n  onPicked,\n}: {\n  onPicked: (id: string) => void;\n}) {\n  const [search, setSearch] = useState(\"\");\n\n  const [results, setResults] = useState<any[]>([]);\n\n  useEffect(() => {\n    if (search.length === 0) {\n      setResults([]);\n      return;\n    }\n    debounce(() => {\n      const res = fuse.search(search);\n      setResults(res.map((r) => r.item));\n      setTimeout(() => forceCheck(), 50);\n    }, 100)();\n  }, [search]);\n\n  return (\n    <Box\n      sx={{\n        \".icon3d\": {\n          img: { width: \"100%\", height: \"100%\" },\n        },\n      }}\n    >\n      <FormControl\n        sx={{ py: 1, position: \"sticky\", top: 56, bgcolor: \"#fff\", zIndex: 1 }}\n        variant=\"outlined\"\n        fullWidth\n      >\n        <TextField\n          slotProps={{\n            input: {\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <Search fontSize=\"small\" />\n                </InputAdornment>\n              ),\n            },\n          }}\n          label=\"Search Icon\"\n          placeholder=\"Search for Icon\"\n          size=\"small\"\n          fullWidth\n          autoFocus\n          autoComplete=\"off\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n        />\n      </FormControl>\n      <Box\n        className=\"widget-list\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        flexWrap=\"wrap\"\n        justifyContent=\"center\"\n      >\n        {(results.length > 0 ? results : icons3d).map((icon) => (\n          <LazyLoad\n            key={icon.id}\n            height={160}\n            style={{ width: 160 }}\n            preventLoading\n            scroll\n            overflow\n          >\n            <Icon3D\n              id={icon.id}\n              name={icon.name}\n              categories={icon.categories.join(\", \")}\n              onClick={() => onPicked(icon.id)}\n            />\n          </LazyLoad>\n        ))}\n        {search.length > 0 && results.length === 0 && (\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {t(\"no_results\")}\n          </Typography>\n        )}\n      </Box>\n    </Box>\n  );\n}\n"],"names":["Icon3D","_ref","id","name","categories","onClick","_jsxs","ButtonBase","className","children","_jsx","src","concat","alt","fuse","Fuse","icons3d","keys","threshold","IconPicker3D","onPicked","search","setSearch","useState","results","setResults","useEffect","length","func","delay","timeoutId","clearTimeout","setTimeout","debounce","res","map","r","item","forceCheck","Box","sx","img","width","height","FormControl","py","position","top","bgcolor","zIndex","variant","fullWidth","TextField","slotProps","input","endAdornment","InputAdornment","Search","fontSize","label","placeholder","size","autoFocus","autoComplete","value","onChange","e","target","display","flexDirection","flexWrap","justifyContent","icon","LazyLoad","style","preventLoading","scroll","overflow","join","Typography","color","t"],"sourceRoot":""}